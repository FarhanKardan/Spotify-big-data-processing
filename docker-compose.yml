services:
  kafka:
    image: bitnami/kafka:3.9.0
    container_name: kafka
    ports:
      - "127.0.0.1:9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://:9093,INSIDE://kafka:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092,INSIDE://kafka:29092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,INSIDE:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INSIDE
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LOG_DIRS=/bitnami/kafka/data
      - KAFKA_LOG4J_LOGGERS=org.apache.kafka=DEBUG
      - KAFKA_KRAFT_CLUSTER_ID=HRpOkqlJQcKEiefppx6dhg
      - KAFKA_CFG_LOG_RETENTION_MS=600000
    volumes:
      - ./data/kafka_data:/bitnami/kafka/data
    restart: always
  kafka-exporter:
    image: danielqsj/kafka-exporter
    container_name: kafka-exporter
    ports:
      - "9308:9308"
    command:
      - "--kafka.server=kafka:29092"
    depends_on:
      - kafka
    restart: always

  redpanda:
    image: redpandadata/console:v2.8.2
    container_name: redpanda-console
    ports:
      - "127.0.0.1:8081:8080"
    environment:
      KAFKA_BROKERS: "kafka:29092"
    depends_on:
      - kafka
    restart: always

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    container_name: kafka-ui
    ports:
      - "127.0.0.1:8082:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=qdeb-pr2-kafka
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka:29092
    depends_on:
      - kafka
    restart: always

  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    restart: always
    ports:
      - 127.0.0.1:9870:9870
      - 127.0.0.1:9000:9000
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./hadoop.env

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    restart: always
    ports:
      - 127.0.0.1:9864:9864
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env

  resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: resourcemanager
    restart: always
    ports:
      - 127.0.0.1:8088:8088
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864"
    env_file:
      - ./hadoop.env

  nodemanager1:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager
    restart: always
    ports:
      - 127.0.0.1:8042:8042
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088"
    env_file:
      - ./hadoop.env

  historyserver:
    image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
    container_name: historyserver
    restart: always
    ports:
      - 127.0.0.1:8188:8188
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088"
    volumes:
      - hadoop_historyserver:/hadoop/yarn/timeline
    env_file:
      - ./hadoop.env

  eventsim:
    image: khoramism/event-generator-eventsim:1.2
    container_name: eventsim
    environment:
      - BOOTSTRAP_SERVERS=kafka:29092
      - SECURITY_PROTOCOL=PLAINTEXT
      - SASL_JAAS_CONFIG=''
      - SASL_MECHANISM=''
      - CLIENT_DNS_LOOKUP=use_all_dns_ips
      - SESSION_TIMEOUT_MS=45000
      - KEY_SERIALIZER=org.apache.kafka.common.serialization.ByteArraySerializer
      - VALUE_SERIALIZER=org.apache.kafka.common.serialization.ByteArraySerializer
      - ACKS=all
    command: ./bin/eventsim -c configs/Guitar-config.json --continuous --from 10 --nusers 40 -k 1
    depends_on:
      - kafka
    restart: always

  spark-master:
    image: bitnami/spark:3.5
    container_name: spark-master
    environment:
      - SPARK_MODE=master
    ports:
      - "127.0.0.1:7077:7077"
      - "127.0.0.1:8080:8080"
    depends_on:
      - kafka
      - namenode
    volumes:
    - ./checkpoints:/tmp/spark-checkpoints 

  spark-worker-1:
    image: bitnami/spark:3.5
    container_name: spark-worker-1
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    ports:
      - "127.0.0.1:8084:8081"
    depends_on:
      - spark-master

  spark-worker-2:
    image: bitnami/spark:3.5
    container_name: spark-worker-2
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    ports:
      - "127.0.0.1:8085:8081"
    depends_on:
      - spark-master

  spark-submit:
    image: bitnami/spark:3.5
    container_name: spark_submit
    environment:
      - SPARK_MODE=local
    volumes:
      - ./scripts/spark_streaming.py:/app/spark.py
    command: >
      /bin/bash -c " spark-submit --master spark://spark-master:7077 --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.0 /app/spark.py"
    depends_on:
      - spark-master
      - kafka

volumes:
  hadoop_namenode:
  hadoop_datanode:
  hadoop_historyserver:
